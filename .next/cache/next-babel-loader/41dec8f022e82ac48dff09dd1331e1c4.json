{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, forwardRef, useImperativeHandle, useRef } from \"react\";\nimport webSymbol from \"../public/globe.png\";\nimport ghLogo from \"../public/github.png\";\nimport { InView } from \"react-intersection-observer\";\nimport Footer from \"./footer\";\nimport Chart from \"react-google-charts\";\nimport confirmedPattern from \"../public/confirmed.svg\";\nimport exploratoryPattern from \"../public/exploratory.svg\";\nconst buttonStyles = {\n  \"Pathfinders Exploratory\": {\n    backgroundImage: `url(${exploratoryPattern})`\n  },\n  \"Pathfinders Confirmed\": {\n    backgroundImage: `url(${confirmedPattern})`\n  },\n  \"DPGs developed\": {\n    backgroundColor: \"#FF952A\"\n  },\n  \"DPGs deployed\": {\n    backgroundColor: \"#3333AB\"\n  }\n};\nconst sdgsDefault = [{\n  name: \"1. No Poverty\",\n  open: false\n}, {\n  name: \"2. Zero Hunger\",\n  open: false\n}, {\n  name: \"3. Good Health and Well-being\",\n  open: false\n}, {\n  name: \"4. Quality Education\",\n  open: false\n}, {\n  name: \"5. Gender Equality\",\n  open: false\n}, {\n  name: \"6. Clean Water and Sanitation\",\n  open: false\n}, {\n  name: \"7. Affordable and Clean Energy\",\n  open: false\n}, {\n  name: \"8. Decent Work and Economic Growth\",\n  open: false\n}, {\n  name: \"9. Industry, Innovation and Infrastructure\",\n  open: false\n}, {\n  name: \"10. Reduced Inequality\",\n  open: false\n}, {\n  name: \"11. Sustainable Cities and Communities\",\n  open: false\n}, {\n  name: \"12. Responsible Consumption and Production\",\n  open: false\n}, {\n  name: \"13. Climate Action\",\n  open: false\n}, {\n  name: \"14. Life Below Water\",\n  open: false\n}, {\n  name: \"15. Life on Land\",\n  open: false\n}, {\n  name: \"16. Peace and Justice Strong Institutions\",\n  open: false\n}, {\n  name: \"17. Partnerships to achieve the Goal\",\n  open: false\n}];\nconst InfoComponent = /*#__PURE__*/forwardRef((props, ref) => {\n  const {\n    0: openCountries,\n    1: setOpenCountries\n  } = useState({\n    development: false,\n    deployment: false,\n    deploymentsInCountry: false,\n    developmentsInCountry: false\n  });\n  const {\n    0: menuInView,\n    1: setMenuInView\n  } = useState(false);\n  const {\n    0: sdgs,\n    1: setSdgs\n  } = useState([...sdgsDefault]);\n\n  const toggleEvidence = i => {\n    sdgs[i].open = !sdgs[i].open;\n    setSdgs([...sdgs]);\n  };\n\n  const handleLayerToggle = (e, layer) => {\n    e.preventDefault();\n    e.stopPropagation();\n    props.onLayerToggle(layer);\n  };\n\n  const toggleCountries = type => {\n    setOpenCountries(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [type]: !prevState[type]\n    }));\n  };\n\n  const divRef = useRef(null);\n  const infoRef = useRef(null);\n\n  const scrollHandle = () => {\n    if (!menuInView) {\n      divRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\",\n        inline: \"nearest\"\n      });\n    }\n  };\n\n  const handleSelectGood = (event, good) => {\n    event.preventDefault();\n    event.stopPropagation();\n    props.onSelectGood(good);\n  };\n\n  const handleSelectCountry = (event, countryCode) => {\n    event.preventDefault();\n    event.stopPropagation();\n    props.onSelectCountry(countryCode);\n  };\n\n  const parseURLs = text => {\n    const url = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gi;\n    let urls = text.match(url);\n    return urls.map((url, index) => __jsx(\"a\", {\n      key: url + index,\n      href: url,\n      target: \"_blank\",\n      rel: \"noreferrer\"\n    }, \"Link to evidence\"));\n  };\n\n  const clearStates = () => {\n    sdgs.map(e => e.open = false);\n    setSdgs([...sdgs]);\n    setOpenCountries({\n      development: false,\n      deployment: false,\n      deploymentsInCountry: false,\n      developmentsInCountry: false\n    });\n  };\n\n  const scrollToInfo = () => {\n    infoRef.current.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"end\"\n    });\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      clearStatesFromParent: clearStates,\n      scrollFromParent: scrollToInfo,\n      scrollFromMap: scrollHandle\n    };\n  });\n  return __jsx(\"div\", {\n    className: \"infoGood\"\n  }, __jsx(\"div\", null, props.SearchBox), __jsx(\"div\", {\n    className: \"controls\",\n    onClick: scrollHandle,\n    ref: infoRef\n  }, __jsx(\"span\", {\n    id: \"arrow-up\",\n    className: !menuInView ? \"arrow up active\" : \"arrow up\"\n  }), __jsx(\"div\", {\n    id: \"hamburger\",\n    className: !menuInView ? \"hamburger-icon\" : \"hamburger-icon active\"\n  }, __jsx(\"div\", {\n    className: \"bar1\"\n  })), __jsx(\"span\", null, menuInView ? \"\" : \"Tap to see filters and info\")), __jsx(\"ul\", {\n    className: \"filters\",\n    ref: divRef\n  }, Object.keys(props.visibleLayer).map((layer, index) => __jsx(\"li\", {\n    id: layer,\n    key: layer + index,\n    onClick: e => handleLayerToggle(e, layer)\n  }, __jsx(\"span\", null, props.visibleLayer[layer] ? layer : \"\"), __jsx(\"a\", {\n    href: \"#\",\n    onClick: e => e.preventDefault(),\n    className: layer + (props.visibleLayer[layer] ? \" active\" : \"\"),\n    style: props.visibleLayer[layer] ? buttonStyles[layer] : {\n      background: \"none\"\n    }\n  }, props.visibleLayer[layer] ? \"\" : layer))), __jsx(InView, {\n    as: \"div\",\n    onChange: inView => setMenuInView(inView)\n  })), Object.keys(props.selectedCountry).length != 0 && __jsx(\"div\", null, props.selectedCountry.pathfinder && __jsx(\"div\", null, __jsx(\"h3\", null, props.selectedCountry.name), __jsx(\"span\", null, \"\\u2705\\xA0\\xA0DPG Pathfinder Country\"), __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"b\", null, \"Status: \"), props.selectedCountry.pathfinder.Status), props.selectedCountry.pathfinder.Sector && __jsx(\"li\", null, __jsx(\"b\", null, \"Sector: \"), props.selectedCountry.pathfinder.Sector), props.selectedCountry.pathfinder.Comments && __jsx(\"li\", null, __jsx(\"b\", null, \"Comments: \"), props.selectedCountry.pathfinder.Comments))), props.selectedCountry.deployments.length > 0 && __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"p\", {\n    className: \"collapsable-text\",\n    onClick: () => toggleCountries(\"deploymentsInCountry\")\n  }, \"There \", props.selectedCountry.deployments.length > 1 ? \"are\" : \"is\", \" \", props.selectedCountry.deployments.length, \" digital public good\", props.selectedCountry.deployments.length > 1 ? \"s\" : \"\", \" deployed in\", \" \", props.selectedCountry.name, __jsx(\"span\", {\n    className: openCountries.deploymentsInCountry ? \"arrow active up\" : \"arrow active down\"\n  })), openCountries.deploymentsInCountry && props.selectedCountry.deployments.map((good, i) => __jsx(\"a\", {\n    className: props.selectedCountry.deployments.length - 1 == i ? \"last\" : \"\",\n    key: good.name + i,\n    onClick: e => handleSelectGood(e, good.name)\n  }, good.name))), __jsx(\"p\", null, \"DPGs deployed in this country are related to\", \" \", props.selectedCountry.sdgsDeployments.filter(sdg => sdg[1].dpgs >= 1).length, \" \", \"of 17(\", (props.selectedCountry.sdgsDeployments.filter(sdg => sdg[1].dpgs >= 1).length / 17 * 100).toFixed(1), \"%) Sustainable Development Goals\"), __jsx(\"div\", {\n    className: \"chart-container\"\n  }, __jsx(Chart, {\n    width: \"100%\",\n    height: \"600px\",\n    chartType: \"BarChart\",\n    loader: __jsx(\"div\", null, \"Loading Chart\"),\n    data: [[\"SDG\", \"DPGs\", {\n      role: \"annotation\",\n      calc: \"stringify\",\n      type: \"string\"\n    }], ...props.selectedCountry.sdgsDeployments.map(sdg => [sdg[0], sdg[1].dpgs, sdg[1].ann + \": \" + sdg[1].dpgs])],\n    options: {\n      animation: {\n        startup: true,\n        easing: \"out\",\n        duration: 500\n      },\n      annotations: {\n        textStyle: {\n          fontSize: 11,\n          bold: false\n        }\n      },\n      colors: [\"#3333AB\"],\n      chartArea: {\n        width: \"85%\",\n        height: \"90%\",\n        top: 0\n      },\n      hAxis: {\n        baselineColor: \"#cccccc\",\n        titleTextStyle: {\n          italic: false\n        },\n        title: \"Digital public goods\",\n        minValue: 0\n      },\n      legend: {\n        position: \"none\"\n      }\n    }\n  }), __jsx(\"b\", null, \"Types of DPGs deployed in \", props.selectedCountry.name), __jsx(Chart, {\n    width: \"100%\",\n    height: \"170px\",\n    chartType: \"BarChart\",\n    loader: __jsx(\"div\", null, \"Loading Chart\"),\n    data: [[\"SDG\", \"DPGs\", {\n      role: \"annotation\",\n      calc: \"stringify\"\n    }], ...props.selectedCountry.typeDeployments.map(el => [...el, el[0] + \": \" + el[1]])],\n    options: {\n      animation: {\n        startup: true,\n        easing: \"out\",\n        duration: 500\n      },\n      colors: [\"#3333AB\"],\n      chartArea: {\n        width: \"85%\",\n        height: \"85%\",\n        top: 0\n      },\n      hAxis: {\n        baselineColor: \"#cccccc\",\n        titleTextStyle: {\n          italic: false\n        },\n        title: \"Digital public goods\",\n        minValue: 0\n      },\n      vAxis: {\n        textPosition: \"none\"\n      },\n      legend: {\n        position: \"none\"\n      }\n    }\n  }))), props.selectedCountry.developments.length > 0 && __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"p\", {\n    className: \"collapsable-text\",\n    onClick: () => toggleCountries(\"developmentsInCountry\")\n  }, \"There \", props.selectedCountry.developments.length > 1 ? \"are\" : \"is\", \" \", props.selectedCountry.developments.length, \" digital public good\", props.selectedCountry.developments.length > 1 ? \"s\" : \"\", \" developed in\", \" \", props.selectedCountry.name, __jsx(\"span\", {\n    className: openCountries.developmentsInCountry ? \"arrow active up\" : \"arrow active down\"\n  })), openCountries.developmentsInCountry && props.selectedCountry.developments.map((good, i) => __jsx(\"a\", {\n    className: props.selectedCountry.developments.length - 1 == i ? \"last\" : \"\",\n    key: good.name + i,\n    onClick: e => handleSelectGood(e, good.name)\n  }, good.name)))), Object.keys(props.selectedGood).length != 0 && __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"goodContainer\"\n  }, __jsx(\"h2\", {\n    className: \"goodName\"\n  }, props.selectedGood.name), __jsx(\"div\", {\n    className: \"goodLinks\"\n  }, props.selectedGood.website && __jsx(\"a\", {\n    href: props.selectedGood.website,\n    target: \"_blank\",\n    rel: \"noreferrer\"\n  }, __jsx(\"img\", {\n    src: webSymbol,\n    width: \"30px\",\n    height: \"30px\"\n  })), props.selectedGood.repositoryURL && __jsx(\"a\", {\n    href: props.selectedGood.repositoryURL,\n    target: \"_blank\",\n    rel: \"noreferrer\"\n  }, __jsx(\"img\", {\n    src: ghLogo,\n    width: \"30px\",\n    height: \"30px\"\n  }))), __jsx(\"p\", {\n    className: \"goodDesc\"\n  }, props.selectedGood.description)), __jsx(\"ul\", {\n    className: \"goodContainer\"\n  }, \" \", __jsx(\"p\", {\n    className: \"text-bold\"\n  }, \"Type of Digital Public Good\"), [\"content\", \"data\", \"software\", \"standard\", \"AI model\"].map(item => {\n    if (props.selectedGood.type.includes(item)) {\n      return __jsx(\"li\", {\n        key: \"type-\" + item\n      }, \"\\u2705\\xA0Open \", item);\n    } else {\n      return __jsx(\"li\", {\n        key: \"type-\" + item\n      }, __jsx(\"svg\", {\n        width: \"18\",\n        height: \"18\"\n      }, __jsx(\"rect\", {\n        width: \"18\",\n        height: \"18\",\n        fillOpacity: \"0\",\n        className: \"rect\"\n      })), \"\\xA0Open \", item);\n    }\n  })), __jsx(\"div\", {\n    className: \"goodContainer\"\n  }, __jsx(\"p\", {\n    className: \"text-bold\"\n  }, \"Relevant Sustainable Development Goals:\"), props.selectedGood[\"SDGs\"].map(item => {\n    return __jsx(\"div\", {\n      key: \"SDG-\" + item.SDGNumber,\n      className: \"header\"\n    }, __jsx(\"p\", {\n      className: \"collapsable-text\",\n      onClick: e => toggleEvidence(item.SDGNumber - 1)\n    }, sdgs[item.SDGNumber - 1].name, \" \", __jsx(\"span\", {\n      className: sdgs[item.SDGNumber - 1].open ? \"arrow active up\" : \"arrow active down\"\n    })), item.evidenceText && sdgs[item.SDGNumber - 1].open && __jsx(\"p\", null, item.evidenceText), item.evidenceURL && sdgs[item.SDGNumber - 1].open && parseURLs(item.evidenceURL));\n  })), __jsx(\"div\", {\n    className: \"goodContainer\"\n  }, Object.keys(props.selectedGood.locations.deploymentCountries).length > 0 && __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"p\", {\n    className: \"collapsable-text\",\n    onClick: e => toggleCountries(\"deployment\")\n  }, \"Deployed in \" + Object.keys(props.selectedGood.locations.deploymentCountries).length + \" of 249 countries:\", \" \", __jsx(\"span\", {\n    className: openCountries.deployment ? \"arrow active up\" : \"arrow active down\"\n  })), openCountries.deployment && Object.entries(props.selectedGood.locations.deploymentCountries).map((country, i) => {\n    return __jsx(\"a\", {\n      className: Object.entries(props.selectedGood.locations.deploymentCountries).length - 1 == i ? \"last\" : \"\",\n      onClick: e => handleSelectCountry(e, country[0]),\n      key: \"deploy-\" + country\n    }, country[1]);\n  })), Object.keys(props.selectedGood.locations.developmentCountries).length > 0 && __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"p\", {\n    className: \"collapsable-text\",\n    onClick: e => toggleCountries(\"development\")\n  }, \"Developed in \" + Object.keys(props.selectedGood.locations.developmentCountries).length + (Object.keys(props.selectedGood.locations.developmentCountries).length > 1 ? \" countries:\" : \" country:\"), \" \", __jsx(\"span\", {\n    className: openCountries.development ? \"arrow active up\" : \"arrow active down\"\n  })), openCountries.development && Object.entries(props.selectedGood.locations.developmentCountries).map((country, i) => {\n    return __jsx(\"a\", {\n      className: Object.entries(props.selectedGood.locations.developmentCountries).length - 1 == i ? \"last\" : \"\",\n      onClick: e => handleSelectCountry(e, country[0]),\n      key: \"develop-\" + country\n    }, country[1]);\n  })))), __jsx(Footer, null));\n});\nexport default InfoComponent;","map":null,"metadata":{},"sourceType":"module"}