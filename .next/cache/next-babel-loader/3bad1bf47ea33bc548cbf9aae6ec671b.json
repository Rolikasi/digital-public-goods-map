{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useRef } from \"react\";\nimport ReactMapboxGl, { ZoomControl, MapContext } from \"react-mapbox-gl\";\nimport confirmedPattern from \"../public/confirmed.svg\";\nimport exploratoryPattern from \"../public/exploratory.svg\";\nimport hardwarePattern from \"../public/hardware.svg\";\nimport { Scrollama, Step } from \"react-scrollama\";\nimport { InView } from \"react-intersection-observer\";\nimport SearchBox from \"./searchBox\";\nimport InfoComponent from \"./infoComponent\";\nimport UseWindowDimensions from \"./UseWindowDimensions\";\nimport dpgaLogo from \"../public/logo.svg\";\nconst layerStyles = {\n  \"Pathfinders Exploratory\": {\n    backgroundImage: `url(${exploratoryPattern})`\n  },\n  \"Pathfinders Confirmed\": {\n    backgroundImage: `url(${confirmedPattern})`\n  },\n  \"DPGs developed\": {\n    backgroundColor: \"#FF952A\"\n  },\n  \"DPGs deployed\": {\n    backgroundColor: \"#3333AB\"\n  }\n};\nconst legends = [\"where DPG was developed\", \"where DPG was deployed\"];\nconst colors = [\"#FF952A\", \"#d4d4ec\"];\nconst zoomDefault = 2;\nconst SDGS = [\"No Poverty\", \"Zero Hunger\", \"Good Health and Well-being\", \"Quality Education\", \"Gender Equality\", \"Clean Water and Sanitation\", \"Affordable and Clean Energy\", \"Decent Work and Economic Growth\", \"Industry, Innovation and Infrastructure\", \"Reduced Inequality\", \"Sustainable Cities and Communities\", \"Responsible Consumption and Production\", \"Climate Action\", \"Life Below Water\", \"Life on Land\", \"Peace and Justice Strong Institutions\", \"Partnerships to achieve the Goal\"];\n\nconst sdgsDefault = () => {\n  let obj = {};\n\n  for (let i = 0; i < SDGS.length; i++) {\n    obj[i + 1] = {\n      dpgs: 0,\n      ann: SDGS[i]\n    };\n  }\n\n  return obj;\n}; // console.log(process.env.MAPBOX_ACCESS_TOKEN)\n\n\nconst Map = ReactMapboxGl({\n  accessToken: process.env.NEXT_PUBLIC_MAPBOX_TOKEN,\n  maxZoom: 9,\n  minZoom: 0,\n  logoPosition: \"bottom-right\",\n  pitchWithRotate: false\n});\nexport default function mapComponent(props) {\n  const {\n    0: mapInstance,\n    1: setMapInstance\n  } = useState();\n  const ref = useRef();\n  const mainRef = useRef();\n  const searchRef = useRef();\n  const {\n    width\n  } = UseWindowDimensions();\n  const {\n    0: zoom,\n    1: setZoom\n  } = useState(zoomDefault);\n  const {\n    0: lonLat,\n    1: setLonLat\n  } = useState([props.lon, props.lat]);\n  const {\n    0: selectedGood,\n    1: setSelectedGood\n  } = useState({});\n  const {\n    0: selectedCountry,\n    1: setSelectedCountry\n  } = useState({});\n  const {\n    0: prevGood,\n    1: setPrevGood\n  } = useState({});\n  const {\n    0: visibleLayer,\n    1: setVisibleLayer\n  } = useState({\n    \"Pathfinders Exploratory\": false,\n    \"Pathfinders Confirmed\": false,\n    \"DPGs deployed\": false,\n    \"DPGs developed\": false\n  });\n  const {\n    0: mapInteractive,\n    1: setMapInteractive\n  } = useState(false); // scrollama states\n\n  const {\n    0: currentStepIndex,\n    1: setCurrentStepIndex\n  } = useState(0);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true); // This callback fires when a Step hits the offset threshold. It receives the\n  // data prop of the step, which in this demo stores the index of the step.\n\n  const onStepEnter = ({\n    data\n  }) => {\n    setCurrentStepIndex(data); // Check and set selectedGood from gsheet\n\n    if (props.story[data].showDPG) {\n      setSelectedGood(prevState => {\n        setPrevGood(prevState);\n        return props.digitalGoods.filter(el => el.name.toLowerCase().indexOf(props.story[data].showDPG.toLowerCase()) !== -1)[0]; // filter and grab 1st result\n      });\n    } else {\n      // clear state if there is no dpg in gsheet\n      setSelectedGood(prevState => {\n        setPrevGood(prevState);\n        return {};\n      });\n    } // Check and set visible layer from gsheet\n\n\n    if (props.story[data].showFilter) {\n      let newVisibleLayer = {};\n      Object.keys(visibleLayer).forEach(v => newVisibleLayer[v] = props.story[data].showFilter.includes(v));\n      setVisibleLayer(newVisibleLayer);\n    } else {\n      setVisibleLayer({\n        \"Pathfinders Exploratory\": false,\n        \"Pathfinders Confirmed\": false,\n        \"DPGs deployed\": false,\n        \"DPGs developed\": false\n      });\n    }\n  };\n\n  const handleSelectCountry = code => {\n    setSelectedGood(prevState => {\n      setPrevGood(prevState);\n      return {};\n    });\n    const deployments = props.digitalGoods.filter(good => Object.keys(good.locations.deploymentCountries).includes(code));\n    const developments = props.digitalGoods.filter(good => Object.keys(good.locations.developmentCountries).includes(code));\n    const countryName = props.countries[code].name; // set country name in searchbox\n\n    searchRef.current.changeInput(countryName); // count sdgs for each country\n\n    const sdgsDeploymentsInfo = Object.entries(deployments.reduce((accum, curr) => [...accum, ...curr.SDGs.map(sdg => {\n      return sdg.SDGNumber;\n    })], []).reduce((acc, curr) => {\n      return acc[curr] ? ++acc[curr][\"dpgs\"] : acc[curr][\"dpgs\"] = 1, acc;\n    }, //initial value helps us create all elements of object\n    _objectSpread({}, sdgsDefault()))); // count types of dpgs for each country\n\n    const typeDeploymentsInfo = Object.entries(deployments.reduce((accum, curr) => [...accum, ...curr.type.map(type => type)], []).reduce((acc, curr) => {\n      return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc;\n    }, //initial value helps us create all elements of object\n    {\n      content: 0,\n      data: 0,\n      software: 0,\n      standard: 0,\n      \"AI model\": 0\n    }));\n    setZoom(6);\n    setLonLat([props.countries[code].lon, props.countries[code].lat]);\n    setSelectedCountry({\n      deployments: deployments,\n      developments: developments,\n      pathfinder: props.countries[code].pathfinder,\n      name: countryName,\n      sdgsDeployments: sdgsDeploymentsInfo,\n      typeDeployments: typeDeploymentsInfo\n    });\n    ref.current.clearStatesFromParent();\n    searchRef.current.changeInput(countryName);\n    width < 1008 && ref.current.scrollFromMap();\n  };\n\n  const handleSelectGoodPopup = goodName => {\n    setSelectedGood(prevState => {\n      setPrevGood(prevState);\n      return props.digitalGoods.filter(el => el.name.toLowerCase().indexOf(goodName.toLowerCase()) !== -1)[0]; // filter and grab 1st result\n    });\n    setSelectedCountry({});\n    searchRef.current.changeInput(goodName);\n  };\n\n  const handleChangeSearchbox = good => {\n    setSelectedGood(prevState => {\n      setPrevGood(prevState);\n      return good;\n    });\n    setSelectedCountry({});\n    ref.current.clearStatesFromParent();\n  };\n\n  const handleLayerToggle = layer => {\n    setVisibleLayer(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [layer]: !prevState[layer]\n    }));\n  };\n\n  const handleClearSearchbox = () => {\n    setSelectedGood(prevState => {\n      setPrevGood(prevState);\n      return {};\n    });\n    setSelectedCountry({});\n    ref.current.clearStatesFromParent();\n  };\n\n  const handleScrollToBottom = () => {\n    width < 1008 ? ref.current.scrollFromParent() : mainRef.current.scrollIntoView(false, {\n      behavior: \"smooth\",\n      block: \"end\",\n      inline: \"nearest\"\n    });\n  };\n\n  return __jsx(\"div\", {\n    ref: mainRef,\n    className: \"visContainer\"\n  }, __jsx(\"div\", {\n    className: loading ? \"whiteBack\" : \"inactive\"\n  }, __jsx(\"img\", {\n    className: \"loader\",\n    src: dpgaLogo\n  })), __jsx(\"div\", {\n    className: \"map\"\n  }, __jsx(\"div\", {\n    className: mapInteractive ? \"mapContainer right\" : \"mapContainer\"\n  }, mapInteractive && width < 1008 && __jsx(SearchBox, {\n    ref: searchRef,\n    goods: props.digitalGoods,\n    countries: props.countries,\n    onSelectCountry: handleSelectCountry,\n    selectedGood: selectedGood.name,\n    selectedCountry: selectedCountry.name,\n    onSelectGood: handleChangeSearchbox,\n    clearSelectedGood: handleClearSearchbox\n  }), props.story.length && props.story[currentStepIndex].image != \"false\" && !mapInteractive && __jsx(\"img\", {\n    className: \"stepImage\",\n    src: props.story[currentStepIndex].imageUrl\n  }), __jsx(Map, {\n    style: \"mapbox://styles/rolikasi/ckn67a95j022m17mcqog82g05\",\n    center: mapInteractive ? lonLat : [parseFloat(props.story[currentStepIndex].longitude), parseFloat(props.story[currentStepIndex].latitude)],\n    zoom: mapInteractive ? [zoom] : [parseFloat(props.story[currentStepIndex].zoom)],\n    pitch: visibleLayer[\"DPGs developed\"] || visibleLayer[\"DPGs deployed\"] ? 60 : 0 // pitch in degrees\n    ,\n    containerStyle: {\n      width: \"100%\",\n      height: \"100%\",\n      position: \"absolute\",\n      top: 0,\n      right: 0\n    },\n    className: mapInteractive ? \"enabled\" : \"disabled\",\n    movingMethod: \"flyTo\",\n    onDragEnd: (map, eventData) => {\n      if (mapInteractive) {\n        setLonLat([map.getCenter().lng, map.getCenter().lat]);\n      }\n    },\n    onZoomEnd: (map, eventData) => {\n      if (mapInteractive) {\n        setZoom(map.getZoom());\n      }\n    },\n    onStyleLoad: map => {\n      var layers = map.getStyle().layers; // Find the index of the first symbol layer in the map style\n\n      var firstSymbolId;\n\n      for (let i = 0; i < layers.length; i++) {\n        if (layers[i].type === \"symbol\") {\n          firstSymbolId = layers[i].id;\n          break;\n        }\n      }\n\n      let hardwareImg = new Image(20, 20);\n\n      hardwareImg.onload = () => map.addImage(\"hardware-pattern\", hardwareImg);\n\n      hardwareImg.src = hardwarePattern; //add layer for each good with map\n\n      props.digitalGoods.map(good => {\n        // check if layer is already created\n        if (map.getLayer(good.name + \"-develop\")) {\n          console.log(good.name + \" is layer already created\");\n          return;\n        } else {\n          map.addLayer({\n            id: good.name + \"-develop\",\n            source: {\n              type: \"vector\",\n              url: \"mapbox://rolikasi.2kn4jvyh\"\n            },\n            \"source-layer\": \"ne_10m_admin_0_countries-dxlasx\",\n            type: \"fill\",\n            paint: {\n              // 'fill-color': '#db3d44', // this is the color you want your tileset to have (red)\n              \"fill-pattern\": \"hardware-pattern\" //this helps us distinguish individual countries a bit better by giving them an outline\n\n            }\n          }, firstSymbolId);\n          map.setLayoutProperty(good.name + \"-develop\", \"visibility\", \"none\");\n          map.setFilter(good.name + \"-develop\", [\"in\", \"ADM0_A3_IS\"].concat(Object.keys(good.locations.developmentCountries))); // This line lets us filter by country codes.\n\n          map.addLayer({\n            id: good.name + \"-deploy\",\n            source: {\n              type: \"vector\",\n              url: \"mapbox://rolikasi.2kn4jvyh\"\n            },\n            \"source-layer\": \"ne_10m_admin_0_countries-dxlasx\",\n            type: \"fill\",\n            paint: {\n              // 'fill-color': '#db3d44', // this is the color you want your tileset to have (red)\n              \"fill-color\": \"#3333AB\",\n              //this helps us distinguish individual countries a bit better by giving them an outline\n              \"fill-opacity\": 0.2\n            }\n          }, firstSymbolId);\n          map.setLayoutProperty(good.name + \"-deploy\", \"visibility\", \"none\");\n          map.setFilter(good.name + \"-deploy\", [\"in\", \"ADM0_A3_IS\"].concat(Object.keys(good.locations.deploymentCountries))); // This line lets us filter by country codes.\n        }\n      }); // Declare the image\n\n      if (map.getLayer(\"Pathfinders Exploratory\")) {\n        console.log(\"Pathfinders Exploratory is layer already created\");\n        return;\n      } else {\n        let exploratoryImg = new Image(20, 20);\n\n        exploratoryImg.onload = () => map.addImage(\"exploratory-pattern\", exploratoryImg);\n\n        exploratoryImg.src = exploratoryPattern; // Use it\n\n        map.addLayer({\n          // adding a layer containing the tileset with country boundaries\n          id: \"Pathfinders Exploratory\",\n          //this is the name of our layer, which we will need later\n          source: {\n            type: \"vector\",\n            url: \"mapbox://rolikasi.2kn4jvyh\"\n          },\n          \"source-layer\": \"ne_10m_admin_0_countries-dxlasx\",\n          type: \"fill\",\n          paint: {\n            \"fill-pattern\": \"exploratory-pattern\",\n            \"fill-opacity\": 0.5\n          },\n          layout: {\n            visibility: \"none\"\n          }\n        }, firstSymbolId);\n        map.setFilter(\"Pathfinders Exploratory\", [\"in\", \"ADM0_A3_IS\"].concat(Object.keys(props.pathfinderExploratory))); // This line lets us filter by country codes.\n      }\n\n      if (map.getLayer(\"Pathfinders Confirmed\")) {\n        console.log(\"Pathfinders Confirmed layer is already created\");\n        return;\n      } else {\n        // Declare the image\n        let confirmedImg = new Image(20, 20);\n\n        confirmedImg.onload = () => map.addImage(\"confirmed-pattern\", confirmedImg);\n\n        confirmedImg.src = confirmedPattern; // Use it\n\n        map.addLayer({\n          // adding a layer containing the tileset with country boundaries\n          id: \"Pathfinders Confirmed\",\n          //this is the name of our layer, which we will need later\n          source: {\n            type: \"vector\",\n            url: \"mapbox://rolikasi.2kn4jvyh\"\n          },\n          \"source-layer\": \"ne_10m_admin_0_countries-dxlasx\",\n          type: \"fill\",\n          paint: {\n            \"fill-pattern\": \"confirmed-pattern\",\n            \"fill-opacity\": 0.5\n          },\n          layout: {\n            visibility: \"none\"\n          }\n        }, firstSymbolId);\n        map.setFilter(\"Pathfinders Confirmed\", [\"in\", \"ADM0_A3_IS\"].concat(Object.keys(props.pathfinderConfirmed))); // This line lets us filter by country codes.\n      }\n\n      if (map.getLayer(\"countries\")) {\n        console.log(\"countries layer is already created\");\n        return;\n      } else {\n        map.addLayer({\n          // adding a layer containing the tileset with country boundaries\n          id: \"countries\",\n          //this is the name of our layer, which we will need later\n          source: {\n            type: \"vector\",\n            url: \"mapbox://rolikasi.2kn4jvyh\"\n          },\n          \"source-layer\": \"ne_10m_admin_0_countries-dxlasx\",\n          type: \"fill\",\n          paint: {\n            \"fill-color\": \"white\",\n            //this helps us distinguish individual countries a bit better by giving them an outline\n            \"fill-opacity\": 0\n          }\n        }, firstSymbolId);\n        map.setFilter(\"countries\", [\"in\", \"ADM0_A3_IS\"].concat(Object.keys(props.countries))); // This line lets us filter by country codes.\n\n        console.log('map.getLayer(\"countries\")', map.getLayer(\"countries\")); // Add 3d layer with extrudes\n\n        map.addSource(\"DPGs developed-polygons-source\", {\n          type: \"geojson\",\n          data: props.devPolygons\n        });\n        map.addSource(\"DPGs deployed-polygons-source\", {\n          type: \"geojson\",\n          data: props.depPolygons\n        });\n        map.addLayer({\n          id: \"DPGs developed\",\n          source: \"DPGs developed-polygons-source\",\n          type: \"fill-extrusion\",\n          paint: {\n            \"fill-extrusion-color\": \"#FF952A\",\n            \"fill-extrusion-height\": [\"get\", \"height\"],\n            \"fill-extrusion-base\": [\"get\", \"base\"]\n          },\n          layout: {\n            visibility: \"none\"\n          }\n        });\n        map.addLayer({\n          id: \"DPGs deployed\",\n          source: \"DPGs deployed-polygons-source\",\n          type: \"fill-extrusion\",\n          paint: {\n            \"fill-extrusion-color\": \"#3333AB\",\n            \"fill-extrusion-height\": [\"get\", \"height\"],\n            \"fill-extrusion-base\": [\"get\", \"base\"]\n          },\n          layout: {\n            visibility: \"none\"\n          }\n        });\n        [\"DPGs deployed\", \"DPGs developed\"].map((layer, i) => map.addLayer({\n          id: `${layer}-text`,\n          source: `${layer}-polygons-source`,\n          type: \"symbol\",\n          paint: {\n            \"text-color\": [\"#3333AB\", \"#FF952A\"][i],\n            \"text-halo-color\": \"#fff\",\n            \"text-halo-width\": 1\n          },\n          layout: {\n            \"text-field\": [\"get\", \"text-field\"],\n            \"text-size\": [\"interpolate\", [\"linear\"], [\"zoom\"], 4.5, 0, 5, 16],\n            \"text-offset\": [\"interpolate\", [\"linear\"], [\"zoom\"], 4.5, [\"literal\", [0, 0.5]], 9, [\"literal\", [0, 3]]],\n            visibility: \"none\"\n          }\n        }));\n        setLoading(false); // set map so we can resize() it in future from anywhere\n\n        setMapInstance(map); // set country info when clicked on country with any data\n\n        map.on(\"click\", \"countries\", function (mapElement) {\n          handleSelectCountry(mapElement.features[0].properties.ADM0_A3_IS);\n        });\n        map.on(\"mouseenter\", \"countries\", () => {\n          map.getCanvas().style.cursor = \"pointer\";\n        });\n        map.on(\"mouseleave\", \"countries\", () => {\n          map.getCanvas().style.cursor = \"\";\n        });\n      }\n    }\n  }, __jsx(ZoomControl, {\n    position: \"bottom-right\"\n  }), __jsx(MapContext.Consumer, null, map => {\n    Object.keys(visibleLayer).map(layer => {\n      console.log(\"toggle \", layer, \" visibility\");\n      map.getLayer(layer) ? map.setLayoutProperty(layer, \"visibility\", visibleLayer[layer] ? \"visible\" : \"none\") : null; // toggle text layer for 3d visualizations\n\n      if ([\"DPGs developed\", \"DPGs deployed\"].includes(layer)) {\n        map.getLayer(layer + \"-text\") ? map.setLayoutProperty(layer + \"-text\", \"visibility\", visibleLayer[layer] ? \"visible\" : \"none\") : null;\n      }\n    });\n\n    if (prevGood.name) {\n      console.log(\"toggle prevgood visibility\");\n      map.setLayoutProperty(prevGood.name + \"-develop\", \"visibility\", \"none\");\n      map.setLayoutProperty(prevGood.name + \"-deploy\", \"visibility\", \"none\");\n    }\n\n    if (selectedGood.name) {\n      console.log(\"toggle selected good visibility\");\n      map.setLayoutProperty(selectedGood.name + \"-develop\", \"visibility\", \"visible\");\n      map.setLayoutProperty(selectedGood.name + \"-deploy\", \"visibility\", \"visible\");\n    }\n  }))), __jsx(InView, {\n    as: \"div\",\n    onChange: inView => {\n      setMapInteractive(!inView);\n      if (mapInstance) mapInstance.resize();\n    }\n  }, __jsx(\"div\", {\n    className: \"scroller\"\n  }, __jsx(Scrollama, {\n    onStepEnter: onStepEnter,\n    offset: \"0.7\"\n  }, props.story.map((_, stepIndex) => __jsx(Step, {\n    data: stepIndex,\n    key: stepIndex\n  }, __jsx(\"div\", {\n    className: `scrolly-p ${stepIndex == 0 ? \"first\" : \"\"} ${stepIndex == props.story.length - 1 ? \"last\" : \"\"}`\n  }, __jsx(\"p\", null, _.text), stepIndex == 0 && __jsx(\"div\", null, __jsx(\"p\", null, \"Scroll down to see the story or skip it and\", \" \", __jsx(\"span\", {\n    className: \"button\",\n    onClick: handleScrollToBottom\n  }, \"explore the map\")), __jsx(\"div\", {\n    className: \"scrollArrows\"\n  }, __jsx(\"span\", null), __jsx(\"span\", null))))))))), __jsx(\"div\", {\n    className: selectedGood.name || Object.values(visibleLayer).some(item => item) && !mapInteractive && props.story[currentStepIndex].image == \"false\" ? \"map-overlay active\" : \"map-overlay\",\n    id: \"legend\"\n  }, __jsx(\"div\", {\n    className: \"legendContainer\"\n  }, selectedGood.name && legends.map((legend, index) => __jsx(\"div\", {\n    key: legend + index\n  }, __jsx(\"span\", {\n    className: \"legend-key\",\n    style: index == 0 ? {\n      backgroundImage: `url(${hardwarePattern})`\n    } : {\n      backgroundColor: colors[index]\n    }\n  }), __jsx(\"span\", null, legend))), !mapInteractive && Object.entries(visibleLayer).map((layer, index) => {\n    return layer[1] && __jsx(\"div\", {\n      key: layer[0] + index\n    }, __jsx(\"span\", {\n      className: \"legend-key rectangle\",\n      style: layerStyles[layer[0]]\n    }), __jsx(\"span\", null, layer[0]));\n  })))), mapInteractive && width >= 1008 && __jsx(InfoComponent, {\n    selectedGood: selectedGood,\n    selectedCountry: selectedCountry,\n    onSelectGood: handleSelectGoodPopup,\n    onSelectCountry: handleSelectCountry,\n    onLayerToggle: handleLayerToggle,\n    visibleLayer: visibleLayer,\n    ref: ref,\n    SearchBox: __jsx(SearchBox, {\n      ref: searchRef,\n      goods: props.digitalGoods,\n      countries: props.countries,\n      onSelectCountry: handleSelectCountry,\n      selectedGood: selectedGood.name,\n      selectedCountry: selectedCountry.name,\n      onSelectGood: handleChangeSearchbox,\n      clearSelectedGood: handleClearSearchbox\n    })\n  }), width < 1008 && __jsx(InfoComponent, {\n    selectedGood: selectedGood,\n    selectedCountry: selectedCountry,\n    onSelectGood: handleSelectGoodPopup,\n    onSelectCountry: handleSelectCountry,\n    visibleLayer: visibleLayer,\n    onLayerToggle: handleLayerToggle,\n    ref: ref\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}